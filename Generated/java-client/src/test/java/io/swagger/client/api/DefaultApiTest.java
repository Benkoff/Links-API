/*
 * Links API
 * API for links microservice data exchange.  Fictional host to be replaced with real one
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.LinksPostRequestBody;
import io.swagger.client.model.LinksRequestResponseBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Get all links
     *
     * Returns a list containing saved links. The list supports paging.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linksGetTest() throws ApiException {
        Boolean activeOnly = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        LinksRequestResponseBody response = api.linksGet(activeOnly, pageSize, pageNumber);

        // TODO: test validations
    }
    
    /**
     * Delete the link specified by it&#x60;s ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linksIdDeleteTest() throws ApiException {
        String id = null;
        api.linksIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get a link by link&#x60;s ID
     *
     * Returns a single link for its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linksIdGetTest() throws ApiException {
        String id = null;
        LinksRequestResponseBody response = api.linksIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update an existing link by link&#x60;s ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linksIdPutTest() throws ApiException {
        String id = null;
        LinksRequestResponseBody link = null;
        api.linksIdPut(id, link);

        // TODO: test validations
    }
    
    /**
     * Save a link
     *
     * Adds a new link to the links list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linksPostTest() throws ApiException {
        LinksPostRequestBody link = null;
        LinksRequestResponseBody response = api.linksPost(link);

        // TODO: test validations
    }
    
    /**
     * Get all user&#x60;s links by user&#x60;s ID
     *
     * Returns a list containing saved links. The list supports paging.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linksUserUserGetTest() throws ApiException {
        String user = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        LinksRequestResponseBody response = api.linksUserUserGet(user, pageSize, pageNumber);

        // TODO: test validations
    }
    
}
